buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE")
    }
}

plugins {
    id "com.moowork.node" version "1.3.1"
    id 'com.palantir.docker' version "0.21.0"
}

apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'

node {
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")

    // Set the work directory for Yarn
    yarnWorkDir = file("${project.buildDir}/yarn")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/../inspectit-ocelot-configurationserver-ui")
}

/**
 * Task for installing the frontend dependencies.
 */
task installFrontend(type: YarnTask) {
    args = ['install']
}

/**
 * Task for building the frontend and copying it to the configuration-server project.
 */
task buildFrontend(type: YarnTask) {
    args = ['export']
}
buildFrontend.dependsOn installFrontend


def serverMainClass = 'rocks.inspectit.ocelot.ConfigurationServer'

bootJar {
    archivesBaseName = 'inspectit-ocelot-configurationserver-noui'
    version = "${buildVersion}"

    manifest {
        attributes 'Start-Class': "${serverMainClass}".toString()
    }
}

/**
 * Builds the configuration server and the web frontend.
 */
task bootJarWithFrontend(type: org.springframework.boot.gradle.tasks.bundling.BootJar) {
    archivesBaseName = 'inspectit-ocelot-configurationserver'
    version = "${buildVersion}"

    from("${project.projectDir}/../inspectit-ocelot-configurationserver-ui/out") {
        into('static/ui')
    }

    manifest {
        attributes 'Start-Class': "${serverMainClass}".toString()
    }

    with bootJar
}
bootJarWithFrontend.dependsOn buildFrontend

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8

test {
    useJUnitPlatform()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.4'
    annotationProcessor 'org.projectlombok:lombok:1.18.4'
}

dependencies {
    implementation(
            project(':inspectit-ocelot-config'),

            "org.springframework.boot:spring-boot-starter-web:2.1.4.RELEASE",
            "org.springframework.security:spring-security-web:5.1.5.RELEASE",
            "org.springframework.security:spring-security-config:5.1.5.RELEASE",
            "org.springframework.boot:spring-boot-starter-data-jpa:2.1.4.RELEASE",
            "org.springframework.ldap:spring-ldap-core",
            "org.springframework.security:spring-security-ldap",
            'org.springframework.boot:spring-boot-starter-actuator',
            
            "org.xerial:sqlite-jdbc:3.28.0",
            "com.github.gwenn:sqlite-dialect:0.1.0",

            'io.jsonwebtoken:jjwt-api:0.10.5',
            'io.jsonwebtoken:jjwt-impl:0.10.5',
            'io.jsonwebtoken:jjwt-jackson:0.10.5',
            "org.yaml:snakeyaml:1.24",
            "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.9",
            "io.springfox:springfox-swagger2:2.9.2",
            "io.springfox:springfox-swagger-ui:2.9.2",
            "commons-io:commons-io:2.6",
            "org.apache.commons:commons-lang3:3.+",
            
            "io.opencensus:opencensus-impl:${openCensusVersion}"
    )
    testImplementation(
            'org.springframework.boot:spring-boot-starter-test:2.1.6.RELEASE',
            'org.junit.jupiter:junit-jupiter-api:5.3.1',
            'org.mockito:mockito-junit-jupiter:2.23.0',
            'com.h2database:h2:1.4.194'

    )
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

task copyServerJar(type: Copy) {
    dependsOn bootJarWithFrontend
    from("${buildDir}/libs/inspectit-ocelot-configurationserver-${version}.jar")
    into("${buildDir}/docker-jar")
    rename ("inspectit-ocelot-configurationserver-${version}\\.jar",
            'inspectit-ocelot-configurationserver.jar')
}

docker {
    name "inspectit/inspectit-ocelot-configurationserver"
    tags "${version}"
    dockerfile file('docker/Dockerfile')
    files 'docker/entrypoint.sh', "$buildDir/docker-jar/inspectit-ocelot-configurationserver.jar"
}
docker.dependsOn copyServerJar